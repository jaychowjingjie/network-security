<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
	<front>
		<title abbrev="PRFC's">Playground Request For Comments</title>
		<author>
			<address>
				<postal>
					<street>JHU 160 Malone Hall/3400 North Charles St.</street>
					<city>Baltimore</city>
					<region>MD</region>
					<code>21218</code>
					<country>USA</country>

				</postal>
				<phone>+1 202-655-1004</phone>
				<email>karandh@jhu.edu</email>



			</address>
		</author>

		<date year="2018" />
		<abstract>
			<t>
				PNT stands for PNT is not TCP.
			</t>

			<t>PNT is a transport layer protocol meant to ensure reliable transmission of data over a connection.</t>

		</abstract>




	
	</front>
	<middle>


		<section title="Purpose">
			<section title="Motivation">
				<t>Playground provides a IP network layer protocol, additionally it also provides multiplexing and demultiplexing viz a viz the use of ports. PNT is connection oriented protocol, that provides reliable data transmission between any two remote process that can communicate with each other over the underlying layer.</t>
			</section>
			<section title="Background">
				<t>Playground provides IP layering and multiplexing in the way of ports. However certain features like error control and reliablity are not provided. PNT uses a small cryptographic hash to provide a lightweight form of error correction. PNT as a software application would create severe overhead by implementing intense and in depth error correction. PNT asssumes that the lower level protocols have access to specialized hardware that provide efficient error detection and correction</t>
			</section>
			
		</section>



		<section title="Session Establishment">


			<section title="Handshake">
				<t> PNT being connection oriented employs a three way handshake to check if a stable and reliable connection can be maintained. Connection establishment will be decided by the OPEN status of the corresponding sockets.</t>

				<t>In PNT we will define two types of OPEN as an ACTIVE and PASSIVE OPEN. In the cases of an active OPEN, the socket is actively pursuing the establishment of a connection to remote host. Correspodingly, the PASSIVE OPEN specifies that it accepts incoming connections however does actively pursue a connection itself</t>



				<t>It is at this time, that the PNT protocol can now establish a connection. This establishment happenns by the way of a three way handshake. The threeway handshake consists of three major entities.
					<list style="symbols">
						<t>SYN</t>
						<t>ACK</t>
						<t>SYN+ACK</t>
					</list>
				</t>

				<t>The connection is intitated by the sending of SYN signal to the passive OPEN socket. The PASSIVE socket must now acknowledge the reception of the SYN signal, it then sends the ACK signal to the sending ACTIVE socket. The ACTIVE socket replies by sending the SYN+ACK signal and then the connection is established and the connection then proceeds with data transmission, detailed later in the PRFC</t>
				
			</section>

		</section>

		<section title="Session Termination">
			<t>PNT can define session termination in two major sessions. One initiated by the user and one by the protocol itself due to loss in network quality</t>

			<section title="Conditions for non-user initiated disconnect">
				<t>PNT lacking in severe error correction relies on the strong and high quality network to transmit data. It defines two fields L_RETRY and G_RETRY to track network quality. L_RETRY is a counter which tracks the times a certain packet of a certain segment had to be resent. Concurrently G_RETRY tracks the amount of times over the entire duration of the transmission that packets had to be dropped</t>

				<t>PNT uses L_RETRY to judge sporadic and disruptions in network quality. If network quality drops acutely, then L_RETRY keeps increasing until the drop in quality halts. If the network quality drops impulsively then L_RETRY reaches its maximum tolerable value and triggers a connection teardown</t>

				<t>PNT uses G_RETRY to judge the overall quality of the network. While L_RETRY is a method to keep track of the impulsive drops in quality, G_RETRY keeps track of overall performance. If G_RETRY reaches its maximum value, it indicates that the degradation in quality is systemic and not sporadic.</t>

				<t>Under either of these situations, a connection termination is initiated.</t>
			</section>

			<section title="Closing the connection">
				<t>Closing a connection means that no more information has to be sent. PNT defines CLOSE as a way to signal the termination of the connection. When CLOSE is received, data transmission is halted. The last packet number is recorded and stored until the acknowledgment for the packet is received.</t>

				<t>CLOSE however does not actually end the connection, but merely signals the start of the connection closing. The FIN flag is sent and once the ACK for the FIN signal is received then the connection is torn down and the connection is closed.</t>
			</section>
		</section>

		<section title="Data Transmission">
			<t>PNT works off reception of acknowledgments to send and receive data. Thus if one was to consider the broad picture of the transmission within PNT, three important signals must be considered. They are: 
				<list style="symbols">
					<t>SND.NXT</t>
					<t>RCV.NXT</t>
					<t>SND.UNA</t>
				</list>

				The sender is responsible for incrementing SND.NXT to send the next packet of that segment. The receiver is responsibling for incrementing RCV.NXT and sending the ACK for that packet of the current segment. Upon reception of the ACK the sender then increments the SND.UNA.

				Similar to TCP, should data flow be idle with all packets of the segment accounted for, then these three values are equal.

			</t>
		</section>

		<section title="Error Handling">
			<t>PNT relies on the lower layer for error correction as lower layers use speciliazed hardware to implement stringent and severe error detection and correction without introducing excessive overhead. However, inspite of that, PNT handles error detection without paying much attention to its correction.</t>

			<t>PNT uses a cryptographic hash of the header fields to determine whether there have been any errors that have been introduced. The MD5 hash is used to check for any corruption in the headers. If the hashes differ then no ACK is sent and the packet must be resent.</t>

			<t></t>
		</section>

		<section title="Packet Description">
			<section title="Packet Definition">
				<t>
					class PNTPacket(PacketType):
						DEFINITION_IDENTIFIER = "PNTPacket"&#xA;
						DEFINITION_VERSION = "1.0"&#xA;
						&#xA;
						FIELDS = [&#xA;
							("sqn_id", UINT32)&#xA;
							("ack_id", UINT32)
							("l_retry", UINT32)&#xA;
							("g_retry", UINT32)&#xA;
							("hashsum", BUFFER)&#xA;
							("reserved1",BUFFER)

							("data", BUFFER)&#xA;
						]&#xA;
				</t>
			</section>
			<section title="Header Description">	
				<t>SQN_ID: Unsigned 32 bit</t>
				<t> The Sequence ID of the particular octet of the current segment</t>

				<t>ACK_ID: Unsigneed 32 bit</t>
				<t>The Acknowledgement ID of the octet that has been received. </t>

				<t>L_RETRY: Unsigned 32 bit</t>
				<t>The amount of time, a particular octet for that current segment has been resent. If the L_RETRY has two thresholds, GLOBAL_SET and TEAR_SET. Exceeding GLOBAL_SET triggers an increment in the G_RETRY and TEAR_SET triggers a connection tear down   </t>

				<t>G_RETRY: Unsigned 32 bit</t>
				<t>The amount of times, over the duration of the connection that particular packets had to be resent. G_RETRY is an indication of connection relability. G_RETRY has one threshold only, crossing which causes the connection to be torn down</t>

				<t>HASHSUM: Buffer</t>
				<t> A hash generated by the key header and the contents of the remaining header fields. The receiving end encrypts the header fields and compares the hashes. If the hashes do not match, then the packet must be resent.</t>

				<t>RESERVED1: Buffer</t>
				<t>Unused header field. It exists for future adaptablity in cases of further updates and/or upgrades to the current protocol, such as encryption.</t>

			</section>
		</section>

		<section title="State Machines">
			<t>PNT is barebones and offer few machine states, which are listed below.
				<list style="symbols">
					<t>OPEN</t>
					<t>RECEIVE</t>
					<t>SEND</t>
					<t>CLOSE</t>
				</list>
			</t>

			<t>OPEN:</t>
			<t>OPEN is the first initial state when the protcol wishes to initiate a connection. In this state we define two substates, as ACTIVE and PASSIVE. ACTIVE states define the PNT socket which makes incoming connections. PASSIVE defines sockets which accept all incoming connections. When there is a match of an local ACTIVE socket with a foreign PASSIVE socket then an connection is initiated and established.</t>

			<t>ESTABLISHED:</t>
			<t>Once the connection has been established, the socket state changes to an ESTABLISHED and a full duplex channel is now transferring data. This continues till a CLOSE signal is sent over the wire. </t>

			<t>CLOSED:</t>
			<t>CLOSED state is reached when the CLOSE signal is sent by either party. The CLOSE signals are acknowledged and then the connection persists until all remaining buffers are emptied. At this point the FIN signal is sent and then once FIN is acknlowledged, the sockets are closed. At this point the connection has completely terminated, and no data transfer continues</t>
		</section>
		<section title="Security Considerations">

				<t>This specification is a documentation standard and not directly
   				related to the technical security of any protocol.</t>
				
				<t>PNT is a plaintext protocol, and offers no features in terms of a secure connection. While initial thought was given to offer certificate based authentication and encryption, PNT exisits to give reliable connection to hosts within and intraconnected and interconnected hosts. Simply put, PNT cannot gurrantee continious access to a certificate authority. However, keeping in mind rapid changes in technology, PNT provides in its header field a spare unused field, which is defined as a simple byte field. The purpose of this is to help or aid in upgrades to the protocol whithout, hopefully placing any undue constraint in the type of data that can go in the aforementioned header.</t>
			</section>
	</middle>
	<back>
		<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.793.xml"?>
		<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
		<?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml"?>
	</back>
</rfc>
