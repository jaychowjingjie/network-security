<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="rfc1" number="1">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="PRFC's">Bobby Simplistic Protocol Request For Comments</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Bo Guan" initials="B.G." role="editor"
           surname="Guan">
     <organization>JHU Network Security Fall 2018</organization>

     <address>
       <postal>
         <street>JHU 101 Shaffer Hall</street>

         <!-- Reorder these if your country does things differently -->

         <city>Baltimore</city>

         <region>MD</region>

         <code>21218</code>

         <country>USA</country>
       </postal>

       <phone>+1 315-806-3346</phone>

       <email>bguan4@jhu.edu</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
   </author>

   <date year="2018" />

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>

   <workgroup>Playground Experiment Employee</workgroup>

   <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>BSP</keyword>

   <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->
 </front>

 <middle>
   <section title="Introduction">
     <t>The Bobby Simplistic Protocol (BSP) is a transportation
     protocol that acts as the transportation layer for the Playground
     framework. It offers reliable data delivery between packet-switched
     computing devices communication networks.</t>
     <t>This document describes the functions to be performed by the 
      Bobby Transportation Protocol and its interface to programs.</t>
   </section>
   <section title="The Flow">

    <t>
    Establishment

      The source device initiates the connection by sending an SYN 
      (Synchronize sequence number) packet to the destination device. 
      The packet will contain no sequence number. The packet 
      type is set to SYN. After that, the destination respond with 
      an ACK (Acknowledge) packet with the Acknowledgement Sequence Number 
      set to 1 and waits for the acknowledgement from the source. 
      The source receives the ACK and sends back another ACK packet 
      with an Acknowledgement Sequence Number of 2 and so on to confirm 
      connection establishment. After this the data exchange begins.


    Exchanging Data

      After the connection is established, the packet type is switched 
      to DAT (Data) and for each file to send, depending on the file size, 
      it will be broken into segments and each segment can be referred 
      by the Data Sequence Number. The sequence number starts with 
      the size number of segments, for example: if there are 100 packets for 
      a certain file, we start with a Data Sequence Number of 100 and 
      decrements by 1 each time. When 0 is reached, the destination will 
      know that it has received enough packets to reconstruct the original file. 
      During this time, the Acknowledgement Sequence Number increments by 1 
      each time the destination receive a packet. The source will not send out 
      another packet until the destination returns with an ACK packet with 
      the same port numbers and Data Sequence Number. 


    Termination

      The source terminates the connection by sending the FIN packet to the 
      destination. The destination then creates another FIN packet and sends 
      it back to the source. The source then acknowledges that the destination 
      received it's request and sends back the ACK packet. Then the destination 
      sends it's ACK packet back and the connection terminates. 


    Error Detection

      When a packet is damaged or altered during transmission, the destination 
      computes the MD5 checksum and compares it with the checksum from the 
      packet to verify it's integrity. if it's damaged, the destination 
      will wait for the source to timeout and send out the same packet 
      once again.
      When a packet is lost in traffic, packet's source will wait until 
      either it receives the ACK packet back from the destination within 
      a time frame, or after the frame times out, the source will try to 
      send out anther DAT, SYN or FIN packet. If this is caused by ACK packet 
      lost, after receiving the same packet, the destination will discard 
      the duplicate package and send back another ACK packet to confirm 
      receiption.If it's due to the loss of a Data, SYN package, after timeout, 
      the source will send out the same packet again and wait for the ACK 
      packet from the destination. 
      If Fin packets gets lost, the source of communication will generate 
      the same FIN packet and sends it back to the destination again, 
      if it's due to the loss of the FIN response from the destination, 
      the source will timeout and perform the same exact procedure like 
      the one above. 
      Basically the destination will not be responsible for 
      any packet lost in either way, only the source handles it and adjust 
      accordingly.
    </t>
   </section>
   
   <section title="Functional Specifications">
     <section title="Header Format">
      <t>
        BSP segments are sent as internet datagrams. The BSP header follows
        the internet header, supplying infomation specific to BSTP protocol.
      </t>
      <t>
        BSP Header Format

        class MyPacket(PacketType):
          DEFINITION_IDENTIFIER = "my.packet.type"
          DEFINITION_VERSION = "1.0"

          FIELDS = [
            ("packet type", UINT8),
            ("padding", UINT8),
            ("source port", UINT16),
            ("destination port", UINT16),
            ("acknowledgement sequence number", UINT32),
            ("data sequence number", UINT32),
            ("checksum", UINT128),
            ("data", BUFFER)
          ]


        Packet Type:  4 bits

          SYN(1000):  Synchronize sequence numbers 
                      (leading 1 represents the start of a connections)
          DAT(0000):  Data packet indicator
          ACK(1111):  Acknowledgment field significant
          FIN(0001):  No more data from sender
                      (Trailing 1 represents the end of a connections)
          <!--More options can be added-->

        Source Port:  16 bits

          The source port number.


        Destination Port:  16 bits

          The destination port number.

        Acknowledgment Number:  32 bits

          If the ACK control bit is set this field contains the value of the
          next sequence number the sender of the segment is expecting to
          receive.  Once a connection is established this is always sent.

        Sequence Number:  32 bits

          The sequence number of the packet in the segmentation of the original data.


        Checksum: 128 bits

          An MD5 hash of the entire packet to verify the integrity.

      </t>
    </section>    
   </section>
   <section title="Technical Specs">
    <t>
    Timeout: 

      Source Timeout:

        The default establishment timeout for initializing the connection 
        is 10 seconds. After the connection is established, the connection 
        timeout will be determined by the ACK packet response time multiply by 4. 
        For example, if the time it took to establish the connection was 't', 
        than the connection timeout would be '4t'. The SYN packet from the 
        source will contain '0' bit values in the data buffer and 0 bits will 
        fill the packet until it reaches the Maximum Packet Size. This will simulate
        the possible maximum travel time for a packet to be delivered the
        destination. Although this is not a guarantee, the connection timeout will
        be constantly updated by recording the maxmium packet travel time each time
        the source sends out a packet.  


      Destination Timeout:

        If the destination is waiting for a segment data packet and is unable to 
        receive the next packet in 5 minutes, the destination will terminate and 
        close the connection.
  
      Retry: 

        If the source didn't receive an ACK packet back before the timeout, 
        the source will retry again sending the same packet. The maximum retry
        is 5 times. After that we send FIN to the destination to terminate the
        connection. If no response was received after 5 retries, we close
        the connection. 


      Maximum Packet Size:

        The Maximum Packet Size for the BSP packet including the header is 
        4 KB (4096 Bytes).


    </t>
   </section>
 </middle>

 <!--  *****BACK MATTER ***** -->

 <back>
   <!-- References split into informative and normative -->

   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->


   <!-- Change Log

v01 2018-09-10  EBD   Initial version

  -->
 </back>
</rfc>
