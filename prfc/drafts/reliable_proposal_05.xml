<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="PRFC's">Extremally friendly message exchange protocol</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Kamil" initials="K.M." role="editor"
           surname="Macheta">
     <organization>JHU Network Security Fall 2018</organization>

     <address>
       <postal>
         <street>JHU 101 Barton Hall/3400 North Charles St.</street>

         <!-- Reorder these if your country does things differently -->

         <city>Baltimore</city>

         <region>MD</region>

         <code>21218</code>

         <country>USA</country>
       </postal>

       <phone>+1 443 535-5089</phone>

       <email>kmachet1@jhu.edu</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
   </author>

   <date year="2018" />

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>

   <workgroup>Playground Experiment Director</workgroup>

   <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>PRFC</keyword>

   <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

   <abstract>
     <t>EFEP is a protocol designed to operate within playground environment. This document is its specification and contains implementation guideline.</t>
   </abstract>
 </front>

 <middle>
   <section title="Introduction">
     <t>The Extremally friendly message exchange protocol is intended for use within the PLAYGROUND environment.
     It should provide reliable data delivery over currently developed transport layer. This document describes functions of the protocol and is a guideline
   for the implementation.</t>
     

     <section title="Requirements Language">
       <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
       "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
       document are to be interpreted as described in <xref
       target="RFC2119">RFC 2119</xref>.</t>
     </section>
        <section title="Motivation">
       <t>The PLAYGROUND environment is major framework which will allow to build separate computer network environment used during the Network Security course.
       However, in the current stage it lacks reliable data transmission. As already observed in similar systems outside the playground,
     the reliability in computer networks brings certain benefits especially in terms of certainty that no errors in communication between entities occur.
     One of the most known examples can be TCP/IP protocol which was initially designed to interface ARPANET and finally became one of the most widespread
     protocols in the world. 
     In fact it solves all the problems occurring in the playground, however due to significant differences within infrastructure and its complexity it cannot be used within a framework. 
   </t>
          
     <t>As a solution, for problems mentioned above the Extremally friendly message exchange protocol was designed and described in this document. 
   </t>
       <t>The playground environment has already implemented Transport layer in terms of OSI model, that is extended by multiplexing feature. It has also already defined data types that
        that might be used during further development and are described as follows:
      
         <list style="symbols">
    	   <t>UINT (with UINT8, UINT16, UINT32, and UINT64 variants) - Unsigned integer</t>
    	   <t>INT (with INT8, INT16, INT32, and INT64 variants) - Integer with sign</t>
    	   <t>BOOL - logical value true or false</t>
         <t>LIST - Multiple values of the same type</t>
         <t>STRING - String type like in Python</t>
         <t>BUFFER - Byte type like in Python</t>
       </list>
        
   </t>
     </section>
   <section title="Scope">
   <t>The protocol is intended to ensure reliable data delivery between two entities in the playground environment. 
   The scope of the protocol includes session management, and in order data error-free delivery</t>
   </section>
   
   </section>
   
   <section title="EFMEP, packet format">
     <section title="Structure of an EFMEP Control Packet">
           <t>The EDMEP protocol works based on exchanging series of control packets in various ways further defined in later part of the document.
           This section describes control packet format that consists of two parts, fixed header and payload</t>
     </section>
     
     <section title="Fixed header">
       <t>The fixed header consists of the following fields with associated types:
       <list style="symbols">
         <t>EFMEP Control Packet type - STRING</t>
         <t>Packet Identifier - INT32</t>
         <t>MD5 hash - STRING</t>
       </list></t>
     <section title="EFEP Control Packet type">
       <t>
       <list style="symbols">
         <t>CONNECT - Connect request</t>
         <t>CONNACK - Connect acknowledgment</t>
         <t>MSGSEND - Send message</t>
         <t>MSGACK - Send acknowledgment</t>
         <t>MSGREC - Message received</t>
         <t>MSGREL - Message released</t>
         <t>MSGCOMP - Delivery completed</t>
         <t>PINGREQ - Ping request</t>
         <t>PINGRESP - Ping response</t>
         <t>DISCONNECT - Disconnect request</t>
       </list>
         </t>
     </section>
     <section title="Packet identifier">
       <t>
       The packet identifier is required only for certain types of control packets, if not required equals 0.
       <list style="symbols">
       <t>CONNECT - Not required</t>
       <t>CONNACK - Not required</t>
       <t>MSGSEND - Required</t>
       <t>MSGACK - Required</t>
       <t>MSGREC - Required</t>
       <t>MSGREL - Required</t>
       <t>MSGCOMP - Required</t>
       <t>PINGREQ - Not required</t>
       <t>PINGRESP - Not required</t>
       <t>DISCONNECT - Not required</t>
     </list>
         </t>
     </section>
     
     </section>
          <section title="Payload">
       <t>
         The payload type is a STRING. For certain packets payload part is required, or optional, for certain it might be set as empty. 
       The list shows requirements.
       <list style="symbols">
       <t>CONNECT - Required</t>
       <t>CONNACK - Not required</t>
       <t>MSGSEND - Optional</t>
       <t>MSGACK - Not required</t>
       <t>MSGREC - Not required</t>
       <t>MSGREL - Not required</t>
       <t>MSGCOMP - Not required</t>
       <t>PINGREQ - Not required</t>
       <t>PINGRESP - Not required</t>
       <t>DISCONNECT - Not required</t>
     </list></t>
     </section> 
     <section title="MD5 hash">
       <t>MD5 hash MUST be computed on entire packet and placed in the header</t>
     </section>
     
     <section title="EFMEP Control packets">
       <section title ="CONNECT - Connection establishment">
         
      <t>After the network connection at transport layer is established, the entity MUST send a CONNECT packet to other entity which it intends to communicate with. 
      The network entity can send CONNECT packet only once during the network connection, second CONNECT packet MUST result in protocol violation and the connection have to be cancelled.</t>
         <t>The payload specifies unique host identifier, protocol name, keep alive and reset session flag</t>
         <t>If the protocol name is incorrect other party MAY terminate the connection, or it MAY continue</t>
         <t>If the reset flag is set to 0, the entity MUST restore previously saved session. If there is no saved session, the entity must create new session. The entity must store session 
         after connection is terminated. After the disconnection of a session which had reset flag value 0, connecting entity must store any messages that are intended to be sent to another party.
       </t>
         <t>If the reset flag is set to 1, the entity MUST discard any previously saved session and start new one. This session lasts as long as the network connection. Data associated with this
         session MUST be discarded after connection termination.</t>
         <t>The session state consists of messages that are intended to be send to other party, messages that have been sent but not completely acknowledged, messages that have been received
         from other parties but have not been completely acknowledged. </t>
         <t>The keep alive is a time interval measured in milliseconds. It is the maximum time interval that is permitted to elapse between the point at which entity finishes transmitting one control packet
         and the point in which it starts sending the next one. In case of absence of any control packets PINGREQ should be transmitted within keep alive interval.</t>
         <t>The entity can send PINGREQ at any time irrespective to keep alive interval, and use PINGRESP to determine state of the connection.</t>
         <t>If entity does not receive any control packet within one and a half of keep alive time it MUST assume that connection has failed.</t>

         <t>The entity must validate CONNECT request and reply with CONNACK packet in case of successful verification or close network connection in case of fail.</t>
         <t>In case of positive verification entity must perform following steps</t>
    </section>
       
       <section title ="CONNACK - Connection establishment acknowledgment">
         
      <t>The first packet send to the entity requesting connection MUST be CONNACK packet.</t>
    
    </section>
       
    <section title ="MSGSEND - Send message packet">
     <t>The payload specifies first delivery attempt flag and user data </t>
      <t>The first delivery attempt flag MUST be set to 1 if entity makes first attempt of message delivery, and to 0 if the message is retransmitted.</t>
      <t>The receiving entity must respond with MSGREC packet for MSGSEND packet </t>
    </section>
       
           <section title ="MSGREC - Message received">
     <t>First packet of data delivery reliability mechanism</t>

    </section>
                  <section title ="MSGREL - Message released">
     <t>Second packet of data delivery reliablity mechanism</t>

    </section>
                 <section title ="MSGCOMP - Delivery completed">
     <t>Third packet of data delivery reliability mechanism</t>

    </section>
                        <section title ="PINGREQ - Ping request">
     <t>After receiving PINGREQ entity must reply with PINGRESP packet</t>

    </section>
                        <section title ="PINGRESP - Ping response">
     <t>Reply for PINGREQ packet</t>

    </section>
                            <section title ="DISCONNECT - Disconnect request">
     <t>DISCONNECT packet is a clean way of terminating the connection</t>
     <t>After sending DISCONNECT packet the entity MUST close any network connection and MUST NOT send any more control packets on that network connection.</t>
                        
    </section>
       </section>
    <section title="Operational behaviour">
 
      <section title ="Storing state">
        <t>Entities MUST store session state at least for the entire duration of network connection. A session MUST last at least as long as the network connection</t>
        </section>
            <section title ="Network connection">
        <t>The EFMEP protocol MUST be implemented on top of the network layer that provides multiplexed connection between hosts</t>
        </section>
                  <section title ="Exactly once delivery QoS mechanism">
        <t>The sender MUST:
      <list style="symbols">
        <t>Assign and unused packet identifier when it has new message to send</t>
        <t>Send a MSGSEND packet containing packet identifier and first delivery flag that equals 1</t>
        <t>Treat MSGSEND packet as unacknowledged until it has received the corresponding MSGREC packet from the receiver</t>
        <t>Send MSGREL packet when it receives a MSGREC packet from receiver. This MSGREL must contain the same packet identifier as original MSGSEND packet</t>
        <t>Treat MSGREL packet as unacknowledged until it has received the corresponding MSGCOMP packet from the receiver</t>
        <t>NOT re-send MSGSEND once it received corresponding MSGREL packet</t>
      </list>  
      </t>
        <t>
          The receiver MUST:
          <list style="symbols">
            <t>Respond with MSGREC containing packet identifier from incoming MSGSEND packet, having accepted received message</t>
            <t>Acknowledge any subsequent MSGSEND packet with sending MSGREC with the same packet identifier as MSGSEND until it has received the corresponding MSGREL packet</t>
          </list>
        </t>
        </section>
      
    <section title ="MD5 hash comparison">
      <t>Receiving entity upon receiving a message MUST calculate MD5 hash and compare it with the hash read from the header.</t>
      <t>If the hash comparison is not valid receiving entity MUST NOT acknowledge received packet</t>
    </section>
	
   </section>
   
  

   </section>
 <!--  *****BACK MATTER ***** -->
 
 
 </middle>
 <back>
   <!-- References split into informative and normative -->

   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

   <references title="Normative References">
     <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
     &RFC2119;
     
   </references>


   <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                     v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                     other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                     Modified comments around figure to reflect non-implementation of
                     figure indent control.  Put in reference using anchor="DOMINATION".
                     Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                     added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                     images. Removed meta-characters from comments (causes problems).

v06 2010-04-01 TT     Changed ipr attribute values to latest ones. Changed date to
                     year only, to be consistent with the comments. Updated the 
                     IANA guidelines reference from the I-D to the finished RFC.  
                     
SETH NIELSON:
  Altered for PLAYGROUND AND PRFC's
  2016-09-21 SJN PRFC 1

  Updated for Fall 2018
  2017-10-1
  -->
 </back>
  

</rfc>
