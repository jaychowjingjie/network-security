<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <title abbrev="PRFC's">Playground Request For Comments</title>
   <author fullname="Cheng Xu"  role="editor" surname="Xu">
     <organization>JHU Network Security Fall 2018</organization>

     <address>
       <postal>
         <street>500 W Univeristy Pkwy St.</street>
         <city>Baltimore</city>
         <region>MD</region>
         <code>21210</code>
         <country>USA</country>
       </postal>
       <phone>+1 443-938-6523</phone>
       <email>cxu33@jhu.edu</email>
     </address>
   </author>

   <date year="2018" />
   <keyword>PRFC</keyword>
   <abstract>
     <t>This document descirbes Cheng's Transmission Protocol(CTP). </t>
   </abstract>
 </front>

 <middle>
   <section title="Introduction">
     <t>The Cheng's Transmission Protocol(CTP) is a simplified TCP-like transmission
       protocol that is designed for use as a highly reliable host-to-host protocol
       between hosts in interconnected network systems.
       This document describes the functions,operations and features of CTP in order to
       give users a comprehensive understanding of CTP.
     </t>
     <section title="Scope">
       <t>The CTP is intended to offer a service of reliable delivery of data between
         interconnected network systems.</t>
     </section>
     <section title="About this Document">
       <t>This document represents a specification of the behavior required of any CTP implementation.</t>
     </section>
     <section title="Features">
       <t>As noted above, the primary purpose of the CTP is to provide reliable
         logical connection serivice and data delivery service. To achieve this
         goal, following areas should be satisfied:</t>
       <t>Basic data Transfer</t>
       <t>Reliable Delivery</t>
       <t>Session</t>
       <t>Bytes-oriented</t>
       <t>The basic features of the CTP is described in the following paragraphs.</t>
       <section title="Basic Data Transfer">
         <t>The CTP is able to transfer continues stream of bytes by packaging some
         number of bytes into packets for transmission through the internet system.
         Basiclly, the CTPs decide when to hold or forward the data at their own
         convenience.</t>
       </section>
       <section title="Reliable Delivery">
         <t>The CTP must recover from data that is damaged,lost,duplicated,or delivered
         out of order by the internet communication system. This is achieved by assigning
         a sequence number to each packet that is transmitted and requiring an acknowledgment
         indicated that data is delivered from the receiving CTP. Also, there is a specific
         time interval, meaning if ACK does not arrive within this time interval, the sending
          CTP will resend the data.</t>
       </section>
       <section title="Error handling">
         <t>Data might be altered or corrupted after transmission. In order to prevent this
         situatinon, both the sending CTP and the receiving CTP will calculate the Checksum
         of the packet. If the resulate are not same, the packet is considered as be altered.</t>
       </section>
     </section>
   </section>

   <section title="PHILOSOPHY">
     <section title="Basic Work Flow">
       <section title="Session Establishment">
         <t>In order to implement reliable data delivery, a session must be established before
            communication between CTPs.A session is created once the sending CTP sends the session
            request with its address and destination address, the receiving CTP receives this request
            and returns a successful message that notifies the sender. Besides, a socket will also be
            created to identify this session through all networks connected together.</t>
       </section>
       <section title="Data Transmission">
         <t>The data that flows in the session is regarded as a stream of bytes. At the sending end,
           the amount of data transmitted every time is not fixed. The sending CTP don't have to wait
           until data is up to any specific amount to send the data. Even if there is one byte, the
           sending CTP can transmit it to the receiver. But the upper bound is not unlimited. Maximum
           packet size is defined to prevent the sending CTP from holding the data for too long and
           too large. Once the amount of data reaches up to the amount of maximum packet size, the
           sending CTP has to send the unsent data. In addition, since each packet will be sent in
           a specific order, the CTP will assign a sequence number to each packet that is transmitted.
           Therefore the receiving CTP is able to reassemble all the received packets in the original order.
         </t>
       </section>
       <section title="Data Retransmission">
         <t>A retransmission timer is set when CTP sends data. If the data is not acknowledged by the
           other end(The data packet is lost or The ACK packet is lost) when the timer expires, CTP
           retransmits the data. The value of this timer is calculated dynamically, based on the round-trip
           time measured by CTP for this session.
         </t>
       </section>
       <section title="Error Handling">
         <t>When the data arrives at the receiving end, the CTP will check if it is in the right order.
           At first, the receiving CTP will check if its sequence number is the previous packet's sequence
           number +1. If so, it returns an ACK with this sequence number to notify the sender that a packet
           with this sequence number is received so far. If its sequence number is bigger than the one it
           should receive, which means the previous data has not arrived yet, so the receiving CTP will
           hold it until the previous data is received.
         </t>
       </section>
       <section title="Session Termination">
         <t>When the sending CTP is finished with data transmission and ready to close the session, it
           sends a Exit request with no data and waits for an ACK from the receiving end.
           After receiving the ACK, the sending TCP close the session. And the receiving CTP terminate
           the session after returning the ACK.</t>
       </section>
     </section>
   </section>

   <section title="FUNCTIONAL SPECIFICATION">
     <section title="Header Format">
       <t>
         class CtpPacket():
            FIELDS = {
            ("Length",UINT8)
            ("Source_addr",UINT8),
            ("Destination_addr",UINT16),
            ("Sequence_num",UINT32),
            ("Max_pkt",UINT16)
            ("Ack_id",UINT16),
            ("Exit",BOOL),
            ("Checksum",STRING)
            }
       </t>
     </section>
     <section title="Terminology">
       <t><list style="numbers">
         <t>Length: Overall length of the entire packet starting with the source_addr and ending with the Checksum.</t>
         <t>Source_addr: Source address field, which identifies where the data originated.</t>
         <t>Destination_addr: Destination address field, which identifies where the data forwarded.</t>
         <t>Sequence_num: Sequence number field, which is the ID of a packet.</t>
         <t>Ack_id: Acknowledgment Id field, which provides a way to notify the sender that its data has been received successfully. </t>
         <t>Exit: Exit field, if it's set to True value, then there is no more data to transfer. Time to close the session.</t>
         <t>Max_pkt: The max packet size field, which defines the maximum data size that the sender is allowed send.</t>
         <t>Checksum: The checksum field, which prevent data from being corrupted or altered. A cyclic redundancy check (CRC)
           algorithm can be used to provide this functionality.</t>
       </list></t>
     </section>
   </section>
 </middle>

 <back>
 </back>
</rfc>
