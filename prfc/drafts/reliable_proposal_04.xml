<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="rfc1" ipr="playgroundStd_v1_0" number="1">
 <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="TCP">Transmission Control Protocol</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Tianhao Ma" role="editor">
     <organization>JHU Network Security Fall 2018</organization>

     <address>
       <postal>
         <street>JHU 160 Malone Hall/3400 North Charles St.</street>

         <!-- Reorder these if your country does things differently -->

         <city>Baltimore</city>

         <region>MD</region>

         <code>21218</code>

         <country>USA</country>
       </postal>

       <phone>+1 410-710-8848</phone>

       <email>tma19@jh.edu</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
   </author>

   <date year="2018" />

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>

   <workgroup>Playground Experiment Director</workgroup>

   <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>PRFC</keyword>

   <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

   <abstract>
     <t>This document describes the standards of Tranmission Control Protocol</t>
   </abstract>
 </front>

 <middle>
   <section title="Introduction">
     <t>The Transmission Control Protocol (TCP) is intended for use as a highly
	 reliable host-to-host protocol between hosts in packet-switched computer
     communication networks, and in interconnected systems of such networks.</t>
   </section>
   
   <section title="General Authoring Guidelines">
    <t>Source Port: 16 bits. The source port number</t>
     
    <t>Destination Port: 16 bits. The destination port number</t>
    
    <t>Sequence Number(SYN number): 32 bits. The sequence number of the first data in this datagram segment.</t>
    
    <t>Acknowledgment Number: 32 bits. This field contains the value of the next sequence number which the sender is expecting to receive. However, this field is valid only when the flag ACK is 1</t>
    
    <t>TCP flags: 6 bits(3 bits for reserved space)
    	<list style="empty">
			<t>ACK Indicates whether the response is valid. 1 indicates valid, otherwise 0 indicates invalid </t>
			<t>SYN Indicates sequence numbers, which can be used for connection establishment</t>
			<t>FIN Indicates all data has been transmitted and no more data need to be transmitted. After send the TCP packet contains the FIN flag, the connection will be disconnected</t>
		</list>
	</t>

	<t>windows: 32 bits. The size of windows, which is used for data flow control</t>

	<t>options: 26 bits. Reserved space</t>
    </section>
    
    <section title="Connnection progress">
    	<section title="Terminology">
    		<t>SYN SENT: represents waiting for a matching connection request after having sent a connection request.</t>
    		<t>SYN_RECV: represents waiting for a confirming connection request acknowledgment after having both received and sent a connection request</t>
    		<t>ESTABLISHED: represents an open connection, data received can be delivered to the user.  The normal state for the data transfer phase of the connection.</t>
    		<t>FIN_WAIT_1: represents waiting for a connection termination request from the remote TCP, or an acknowledgment of the connection termination request previously sent.</t>
    		<t>FIN_WAIT_2: represents waiting for a connection termination request from the remote TCP.</t>
    		<t>LAST_ACK: represents waiting for an acknowledgment of the connection termination request previously sent to the remote TCP (which includes an acknowledgment of its connection termination request).</t>
    		<t>CLOSE_WAIT: represents waiting for a connection termination request from the local user.</t>
    		<t>CLOSING: represents waiting for a connection termination request acknowledgment from the remote TCP.</t>
    		<t>CLOSED: represents no connection state at all.</t>
    	</section>
    	<section title="The establishment of connection">
    		<t>First handshake: Ask for establishing connection. The client send the datagram of requesting connnection establishing, setting SYN = 1 and sending the sequence number x, after which the client enters SYN SEND state and waits for the comfirmation from server</t>
    		<t>Seconde handshake: Server reveived the request for establising connection from client and needs give a comfirmation. So the server set ACK = x + 1(sequence number plus one, which exactly the client expects) and set the flag SYN = 1. Besides, the server generate a new sequence number from own side and put it along with the ACK and SYN into segment and then send it to client. At the same time, the server enters into SYN_RECV state</t>
    		<t>The Third handshake: The client receives the SYN+ACK segment of the server. Then the client sets the Acknowledgment Number to y+1 and sends an ACK packet to the server. After the segment is sent, both the client and the server enter the ESTABLISHED state and complete the TCP three-way handshake.</t>
    	</section>
    	<section title="Connection close">
    		<t>First handshake: Host 1 (either the client or the server), set the Sequence Number and Acknowledgment Number, and send a FIN segment to Host 2; At this time, Host 1 enters the FIN_WAIT_1 state; this means that Host 1 has no data to send to Host 2;</t>
    		<t>Second handshake: Host 2 receives the FIN packet sent by host 1 and returns an ACK packet to host 1. Acknowledgment Number is Sequence number plus 1; host 1 enters FIN_WAIT_2 state; host 2 tells host 1 that it "agree" with your shutdown request</t>
    		<t>Third handshake: Host 2 sends a FIN segment to host 1, requesting to close the connection, and host 2 enters the LAST_ACK state.</t>
    		<t>Fourth handshake: Host 1 receives the FIN packet sent by host 2, and sends an ACK packet to host 2, and then host 1 enters the TIME_WAIT state; after receiving the ACK packet from host 1, host 2 closes the connection; After waiting for 2s, host 1 still does not receive a reply, which proves that the server has been closed normally. Well, host 1 can also close the connection.</t>
    	</section>
    </section>

    <section title="Sliding Window">
    	<section title="Terminology">
    	<t>terminologies:
    		<list style="empty">
    			<t>Send and Acknowledged: These data represent data that has been sent successfully and has been confirmed</t>
    			<t>Send but Not Yet Acknowledged: This part of the data is transmitted but not confirmed. The data is sent out, but no ACK is received from the receiving end.  It is considered that the transmission has not been completed. This belongs to the data in the window.</t>
    			<t>Not Sent, Recipient Ready to Receive: This part is the data sent as soon as possible. This part of the data has been loaded into the cache, that is, in the window, these data wait to be sent. In fact, this window is completely notified by the receiver. If the receiver can still accept these packets, so the sender Need to send these packages as soon as possible</t>
    			<t>Not Sent, Recipient Not Ready to Receive: These data are not sent, and the receiver also do not allow sender to send because the data has exceeded the range received by the sender.</t>
    		</list>
    	</t>
    	</section>
    	<section title="Example">
    		<t>TCP does not reply ACK for every segment. It may send an ACK to two segments or one ACK [accumulated ACK] for multiple segments. For example, the sender has segments 1, 2, 3 and segment 2, 3 are sent first, but the receiver expects to receive segment 1. At this time, the segments 2, 3 can only be placed in the buffer and wait for the segment 1. If the segment 1 does not come, the segments 2 and 3 will also be discarded. If the segment 1 comes, an ACK will be sent to confirm the three segments.
    		</t>
    		<t>For example:
	    		<list style="empty">
	    			<t>Assume that 1~14 of these data is sent to TCP by the upper application, and TCP divides it into four segments for sending to internet.</t>
	    			<t>segment1(1~3), segment2(4~6), segment3(7~10) and segment4(11~14) are sent out in order and assume that the receiver receive segment1 segment2 segment4</t>
	    			<t>At this point, receiver reply an ACK packet indicating that 1~10 data has been received, and segment4 is cached in guarantee order, generating a hole for saving segment 3</t>
	    			<t>After the sender receives the ACK, it will move segment 1,2,4 from "Send but Not Yet Acknowledged" to "Send and Acknowledged". At this time, the window moves to the right.</t>
	    			<t>Assume that the Window Size informed by the receiver remains unchanged, the window is shifted to the right, and some new vacancies are generated, which means the "Not Sent，Recipient Ready to Receive" add some new vaccacies</t>
	    			<t>For the segment 3, if it exceeds a certain time, TCP will retransmit it according to the restransmission mechanism. If the retransmission succeed, segment 3 and segment 4 will be confirmed at same time. if not, segment 4 will also be discarded</t>
	    		</list>
	    	</t>
    	</section>
    </section>

 </middle>

 <!--  *****BACK MATTER ***** -->

 <back>
   <!-- References split into informative and normative -->

   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->


   <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                     v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                     other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                     Modified comments around figure to reflect non-implementation of
                     figure indent control.  Put in reference using anchor="DOMINATION".
                     Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                     added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                     images. Removed meta-characters from comments (causes problems).

v06 2010-04-01 TT     Changed ipr attribute values to latest ones. Changed date to
                     year only, to be consistent with the comments. Updated the 
                     IANA guidelines reference from the I-D to the finished RFC.  
                     
SETH NIELSON:
  Altered for PLAYGROUND AND PRFC's
  2016-09-21 SJN PRFC 1

  Updated for Fall 2018
  2017-10-1
  -->
 </back>
</rfc>
