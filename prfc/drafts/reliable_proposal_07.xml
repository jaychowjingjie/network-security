<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
    (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced. 
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2360 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2360.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="reliable_rfc" ipr="playgroundStd_v1_0" number="100">
    <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902, playgroundWinter201501
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

 <!-- ***** FRONT MATTER ***** -->

 <front>
   <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

   <title abbrev="PRFC PRCP">Playground Reliable Control Protocol</title>

   <!-- add 'role="editor"' below for the editors if appropriate -->

   <!-- Another author who claims to be an editor -->

   <author fullname="Richard Allen Bradt" initials="R.A.B." role="editor" 
           surname="Bradt">
           
      <organization>JHU Network Security Fall 2018</organization>

      <address>
         <postal>
            <street>JHU 316 Malone Hall/3400 North Charles St.</street>
            <city>Baltimore</city>
            <region>MD</region>
            <code>21218</code>
            <country>USA</country>
         </postal>
         <phone>+1 205-789-9019</phone>
         <email>rbradt1@jhu.edu</email>
      </address>
   </author>

   <date month="September" year="2018" />

   <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

   <!-- Meta-data Declarations -->

   <area>General</area>
   <workgroup>JHU Net Security Group</workgroup>
   <keyword>PRFC</keyword>
   <keyword>PRCP</keyword>
   <keyword>Playground Reliable Control Protocol</keyword>
   <abstract>
       <t>This document presents a transport protocol for the PLAYGROUND system
       designed by Dr. Seth Nielson and the Johns Hopkins University Network
       Security Group.  The PRFC specifies the standards of the Playground 
       Reliable Transport Protocol.</t>
    </abstract>
 </front>

 <middle>
	<section title="Introduction">
            <t>The Playground Reliable Control Protocol (PRCP) will provide the
	    mechanisms to provide reliable, error-free data transport for the
	    Playground experiment system.  The playground system provides 
	    addressing at the lower layers as well port addressing at the transport
	    layer.  Therefore, addressing will not be covered in this PRFC.  This
	    protocol covers establishing a connection, providing reliable data
	    transfer, and closing the session.</t>
        </section>
	<section title="The PRCP Module">
           <t><list style="empty">
			   
			   <t>	FIELDS = [</t>
			   <t>     ("STATE", STRING),</t>
			   <t>     ("REQUEST", STRING),</t>
		           <t>     ("ID", UINT32),</t>
			   <t>	   ("SEQ_NUM", UINT32),</t>
			   <t>     ("SIZE", UINT32),</t>
			   <t>     ("CHECKSUM", UINT32),</t>
		           <t>     ("data", BUFFER) ] </t>

			   <t>     Figure 1: The PRCP Header</t>
	       </list> 
	   </t>


	   <t>The PRCP module makes connections by working with assigned 'states'
           and action requests to perform a simplified handshake.  The assigned
	   states for a port will be OPEN, CLOSED, BUSY, or ABLE.  The OPEN and
	   CLOSED states pertain to a port's readiness to establish a connection.
	   The ABLE state pertains to the port readiness to send and receive 
	   packets. Finally, while in the BUSY state, a port will be unable to
	   receive additional packets.</t>
           
           <t>The action requests found in a PRCP packet include CONNECT, END,
	   PUSH, and WAIT.  CONNECT and END pertain to session establishment and
	   closure respectively.  PUSH is used to send and receive data.  WAIT is
	   a request to prevent a host from sending additional data.</t>
	</section>
	<section title="Establish A Session">
	   <t>In order for a connection to be established both ports must be in an
           OPEN state.  TO initiate a connection, a host will send out a CONNECT 
	   request along with a randomized identification number.  Once the request
	   is received, the destiniation host will acknowledge the request by 
	   sending back the CONNECT request along with its own identification 
	   number.  These identification numbers will be used to give the session 
	   its own unique identification number.  This unique session identification
	   number can be used as a way to authenticate packets during the session.
	   After sending back the CONNECT request, the destination host will change
	   its state to ABLE meaning it is ready to receive data.</t>
        </section>
	<section title="Ending the session">
	   <t>When the host is finished sending data and is ready to close the
           session, the host will send an END reqeust with a BUSY state meaning it
	   will no longer be sending data.  While the destination host is still 
	   processing the incoming packets, it will respond to the END reqeust with
	   a WAIT request under a BUSY state.  Once processing is complete, the
	   destination host will then acknowledge the END request by sending its
	   own END request and changing its state to CLOSED.  The host can then 
	   close and end the session.</t>
        </section>
        <section title="Reliable Data Communication">
	   <t>For data communications, the PRCP module will use the SIZE and SEQ_NUM 
	   fields of the header.  The SIZE will portray the expected total number of
	   packets to be sent.  The packets will be sent in sequential order,
	   incrementing the SEQ_NUM each time.  This will tell the destination the 
	   proper order to place the packets.  The last packet having a SEQ_NUM equal
	   to the SIZE field.  Error correction can be accomplished with a CHECKSUM of
           the header with each packet.</t>
	</section>
 </middle>
    
 <back>
 </back>  
</rfc>
